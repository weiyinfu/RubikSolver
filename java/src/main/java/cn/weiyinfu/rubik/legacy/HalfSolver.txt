package cn.weiyinfu.rubik.legacy;

import cn.weiyinfu.rubik.diamond.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.stream.Collectors;

import static cn.weiyinfu.rubik.diamond.Displace.mul;

/**
 * 给定一个魔方，只记录若干步之后的全部状态
 * 当求解的时候，扫描全部置换
 * <p>
 * 比如三阶魔方上帝之数是20，那么记录10步以内的全部置换。
 * 从这些置换里面选择两个就能够完成置换分解。
 */
public class HalfSolver implements Solver {
    final int maxLayer;
    Logger log = LoggerFactory.getLogger(HalfSolver.class);
    public final List<Operation> operations;
    long[][] zob;
    public Map<Long, Node> table;
    Provider provider;

    public static class Node implements Serializable {
        public int[] a;
        long hash;
        int layer;//当前是第几层
        int prevOp;

        Node(int[] a, long hash, int layer, int prevOp) {
            this.a = a;
            this.hash = hash;
            this.layer = layer;
            this.prevOp = prevOp;
        }
    }

    static class Op {
        List<Integer> valid = new ArrayList<>();
        int[] displace;
        long[][] zob;

        Op(int[] a, long[][] zob) {
            displace = a;
            this.zob = zob;
            for (int i = 0; i < a.length; i++) {
                if (a[i] == i) {
                    continue;
                }
                valid.add(i);
            }
        }

        Node apply(Node x) {
            int[] a = Arrays.copyOf(x.a, x.a.length);
            var hash = x.hash;
            for (int i = 0; i < valid.size(); i++) {
                int ind = valid.get(i);
                hash ^= zob[ind][a[ind]];
                a[ind] = x.a[displace[ind]];
                hash ^= zob[ind][a[ind]];
            }
            return new Node(a, hash, x.layer + 1, 0);
        }
    }

    long calculateHash(int[] a) {
        long s = 0;
        for (int i = 0; i < a.length; i++) {
            s ^= zob[i][a[i]];
        }
        return s;
    }

    Map<Long, Node> buildTables() {
        var startState = Displace.arange(operations.get(0).displace.length);
        var start = new Node(startState, calculateHash(startState), 0, 0);
        Queue<Node> q = new ConcurrentLinkedQueue<>();
        q.add(start);
        var visited = new ConcurrentSkipListMap<Long, Node>();
        visited.put(start.hash, start);
        long beginTime = System.currentTimeMillis();
        var dis = operations.stream().map(x -> new Op(x.reverseDisplace, zob)).collect(Collectors.toList());
        var layerCountMap = new TreeMap<Integer, Integer>();
        var lastLayer = 0;
        while (!q.isEmpty()) {
            if (visited.size() % 10000 == 0) {
                log.info(String.format("visited:%s,queue:%s,layer=%s\n", visited.size(), q.size(), lastLayer));
            }
            var it = q.poll();
            if (it == null) {
                continue;
            }
            if (it.layer >= maxLayer) {
                continue;
            }
            lastLayer = it.layer;
            for (var i = 0; i < dis.size(); i++) {
                var op = dis.get(i);
                var nex = op.apply(it);
                nex.prevOp = i;
                if (!visited.containsKey(nex.hash)) {
                    layerCountMap.put(nex.layer, layerCountMap.getOrDefault(nex.layer, 0) + 1);
                    visited.put(nex.hash, nex);
                    q.add(nex);
                }
            }
        }
        long timeUsed = System.currentTimeMillis() - beginTime;
        log.info(String.format("耗时%s秒,tableSize=%s\n", timeUsed / 1000, visited.size()));
        for (var i : layerCountMap.entrySet()) {
            log.info(String.format("%s=>%s\n", i.getKey(), i.getValue()));
        }
        return visited;
    }

    static void saveTable(Map<Long, Node> ma, Path tablePath) {
        try (var o = Files.newOutputStream(tablePath);
             var cout = new ObjectOutputStream(new BufferedOutputStream(o));
        ) {
            cout.writeObject(ma);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    static Map<Long, Node> loadTable(Path tablePath) {
        try (var cin = new ObjectInputStream(new BufferedInputStream(Files.newInputStream(tablePath)))) {
            Map<Long, Node> ma = (Map<Long, Node>) cin.readObject();
            System.out.println("loadTable over:" + ma.size());
            return ma;
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    public String solve(String s) {
        var a = provider.parseState(s);
        var opIds = solve(a);
        return OperationList.operation2string(opIds, operations);
    }

    List<Integer> solveSimple(int[] a) {
        var opList = new ArrayList<Integer>();
        var target = provider.newStart();
        int cnt = 0;
        while (!Arrays.equals(target, a)) {
            cnt++;
            if (cnt > 100000) {
                throw new RuntimeException("too much steps");
            }
            var k = calculateHash(a);
            var no = table.get(k);
            if (no == null) {
                throw new RuntimeException("illegal state");
            }
            var op = operations.get(no.prevOp);
            a = mul(a, op.displace);
            opList.add(no.prevOp);
        }
        return opList;
    }

    public List<Integer> solve(int[] a) {
        Node[] pair = null;
        var code = calculateHash(a);
        if (table.containsKey(code)) {
            return solveSimple(a);
        }
        for (var i : table.values()) {
            var x = Displace.divFast(a, i.a);
            var y = calculateHash(x);
            if (table.containsKey(y)) {
                //如果包含这个key，则找到了答案
                pair = new Node[]{i, table.get(y)};
                break;
            }
        }
        if (pair == null) {
            throw new RuntimeException("I cannot solve this problem:" + Arrays.toString(a));
        }
        var one = solveSimple(pair[0].a);
        var two = solveSimple(pair[1].a);
        one.addAll(two);
        return one;
    }

    public HalfSolver(Path tablePath, Provider p, int maxLayer) {
        this.provider = p;
        this.maxLayer = maxLayer;
        operations = provider.getOperations();
        if (operations.size() == 0) {
            throw new RuntimeException("operations is empty");
        }
        int displaceSize = operations.get(0).displace.length;
        zob = new long[displaceSize][displaceSize];
        Random r = new Random(0);
        for (int i = 0; i < displaceSize; i++) {
            for (int j = 0; j < displaceSize; j++) {
                zob[i][j] = r.nextLong();
            }
        }
        if (!Files.exists(tablePath)) {
            var ma = this.buildTables();
            saveTable(ma, tablePath);
        }
        this.table = loadTable(tablePath);
    }
}
